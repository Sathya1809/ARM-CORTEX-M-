
task_scheduling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000111c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080012a4  080012a4  000022a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012f8  080012f8  00003060  2**0
                  CONTENTS
  4 .ARM          00000000  080012f8  080012f8  00003060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012f8  080012f8  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012f8  080012f8  000022f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080012fc  080012fc  000022fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08001300  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003060  2**0
                  CONTENTS
 10 .bss          000001c0  20000060  20000060  00003060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  00003060  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000e01  00000000  00000000  0000308a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000057f  00000000  00000000  00003e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000208  00000000  00000000  00004410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000170  00000000  00000000  00004618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002de0  00000000  00000000  00004788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002043  00000000  00000000  00007568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009c54  00000000  00000000  000095ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000131ff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d3c  00000000  00000000  00013244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  00013f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800128c 	.word	0x0800128c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	0800128c 	.word	0x0800128c

080001c8 <led_init_all>:
{
  for(uint32_t i = 0 ; i < count ; i++);
}

void led_init_all(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 80001ce:	4b19      	ldr	r3, [pc, #100]	@ (8000234 <led_init_all+0x6c>)
 80001d0:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 80001d2:	4b19      	ldr	r3, [pc, #100]	@ (8000238 <led_init_all+0x70>)
 80001d4:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	f043 0208 	orr.w	r2, r3, #8
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 8000212:	200c      	movs	r0, #12
 8000214:	f000 f82a 	bl	800026c <led_off>
    led_off(LED_ORANGE);
 8000218:	200d      	movs	r0, #13
 800021a:	f000 f827 	bl	800026c <led_off>
    led_off(LED_RED);
 800021e:	200e      	movs	r0, #14
 8000220:	f000 f824 	bl	800026c <led_off>
    led_off(LED_BLUE);
 8000224:	200f      	movs	r0, #15
 8000226:	f000 f821 	bl	800026c <led_off>



}
 800022a:	bf00      	nop
 800022c:	3708      	adds	r7, #8
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	40023830 	.word	0x40023830
 8000238:	40020c00 	.word	0x40020c00

0800023c <led_on>:

void led_on(uint8_t led_no)
{
 800023c:	b480      	push	{r7}
 800023e:	b085      	sub	sp, #20
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000246:	4b08      	ldr	r3, [pc, #32]	@ (8000268 <led_on+0x2c>)
 8000248:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	79fa      	ldrb	r2, [r7, #7]
 8000250:	2101      	movs	r1, #1
 8000252:	fa01 f202 	lsl.w	r2, r1, r2
 8000256:	431a      	orrs	r2, r3
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	601a      	str	r2, [r3, #0]

}
 800025c:	bf00      	nop
 800025e:	3714      	adds	r7, #20
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	40020c14 	.word	0x40020c14

0800026c <led_off>:

void led_off(uint8_t led_no)
{
 800026c:	b480      	push	{r7}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000276:	4b08      	ldr	r3, [pc, #32]	@ (8000298 <led_off+0x2c>)
 8000278:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	79fa      	ldrb	r2, [r7, #7]
 8000280:	2101      	movs	r1, #1
 8000282:	fa01 f202 	lsl.w	r2, r1, r2
 8000286:	43d2      	mvns	r2, r2
 8000288:	401a      	ands	r2, r3
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	601a      	str	r2, [r3, #0]

}
 800028e:	bf00      	nop
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr
 8000298:	40020c14 	.word	0x40020c14

0800029c <main>:
}TCB_t;

TCB_t user_tasks[MAX_TASK];

int main(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	enable_processor_fault();
 80002a0:	f000 f9aa 	bl	80005f8 <enable_processor_fault>

	init_schedule_stack(SCH_STACK_START);
 80002a4:	4809      	ldr	r0, [pc, #36]	@ (80002cc <main+0x30>)
 80002a6:	f000 f8f4 	bl	8000492 <init_schedule_stack>

    init_tasks();
 80002aa:	f000 f9f9 	bl	80006a0 <init_tasks>

    init__tasks_stack();
 80002ae:	f000 f959 	bl	8000564 <init__tasks_stack>

   	led_init_all();
 80002b2:	f7ff ff89 	bl	80001c8 <led_init_all>

   	init_systick_timer(TICK_HZ);
 80002b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002ba:	f000 f851 	bl	8000360 <init_systick_timer>

    switch_sp_to_psp();
 80002be:	f000 f9e1 	bl	8000684 <switch_sp_to_psp>

    task1_handler();
 80002c2:	f000 f805 	bl	80002d0 <task1_handler>

	while(1);
 80002c6:	bf00      	nop
 80002c8:	e7fd      	b.n	80002c6 <main+0x2a>
 80002ca:	bf00      	nop
 80002cc:	fffff000 	.word	0xfffff000

080002d0 <task1_handler>:
}

//Step 1b
void task1_handler(void){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	//These tasks do not end.So do in always true loop
	while(1){
		led_on(LED_GREEN);
 80002d4:	200c      	movs	r0, #12
 80002d6:	f7ff ffb1 	bl	800023c <led_on>
		task_delay(1000); //100 tickcounts
 80002da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002de:	f000 fa29 	bl	8000734 <task_delay>
		led_off(LED_GREEN);
 80002e2:	200c      	movs	r0, #12
 80002e4:	f7ff ffc2 	bl	800026c <led_off>
		task_delay(1000); //100 tickcounts
 80002e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002ec:	f000 fa22 	bl	8000734 <task_delay>
		led_on(LED_GREEN);
 80002f0:	bf00      	nop
 80002f2:	e7ef      	b.n	80002d4 <task1_handler+0x4>

080002f4 <task2_handler>:
	}
}
void task2_handler(void){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_ORANGE);
 80002f8:	200d      	movs	r0, #13
 80002fa:	f7ff ff9f 	bl	800023c <led_on>
		task_delay(500);//500ms
 80002fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000302:	f000 fa17 	bl	8000734 <task_delay>
		led_off(LED_ORANGE);
 8000306:	200d      	movs	r0, #13
 8000308:	f7ff ffb0 	bl	800026c <led_off>
		task_delay(500);//500ms
 800030c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000310:	f000 fa10 	bl	8000734 <task_delay>
		led_on(LED_ORANGE);
 8000314:	bf00      	nop
 8000316:	e7ef      	b.n	80002f8 <task2_handler+0x4>

08000318 <task3_handler>:
	}
}
void task3_handler(void){
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_RED);
 800031c:	200e      	movs	r0, #14
 800031e:	f7ff ff8d 	bl	800023c <led_on>
		task_delay(250);//250ms
 8000322:	20fa      	movs	r0, #250	@ 0xfa
 8000324:	f000 fa06 	bl	8000734 <task_delay>
		led_off(LED_RED);
 8000328:	200e      	movs	r0, #14
 800032a:	f7ff ff9f 	bl	800026c <led_off>
		task_delay(250);//250ms
 800032e:	20fa      	movs	r0, #250	@ 0xfa
 8000330:	f000 fa00 	bl	8000734 <task_delay>
		led_on(LED_RED);
 8000334:	bf00      	nop
 8000336:	e7f1      	b.n	800031c <task3_handler+0x4>

08000338 <task4_handler>:
	}
}
void task4_handler(void){
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_BLUE);
 800033c:	200f      	movs	r0, #15
 800033e:	f7ff ff7d 	bl	800023c <led_on>
		task_delay(125);//125ms
 8000342:	207d      	movs	r0, #125	@ 0x7d
 8000344:	f000 f9f6 	bl	8000734 <task_delay>
		led_off(LED_BLUE);
 8000348:	200f      	movs	r0, #15
 800034a:	f7ff ff8f 	bl	800026c <led_off>
		task_delay(125);//125ms
 800034e:	207d      	movs	r0, #125	@ 0x7d
 8000350:	f000 f9f0 	bl	8000734 <task_delay>
		led_on(LED_BLUE);
 8000354:	bf00      	nop
 8000356:	e7f1      	b.n	800033c <task4_handler+0x4>

08000358 <idle_task_handler>:
	}
}
void idle_task_handler(void){
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
	while(1);
 800035c:	bf00      	nop
 800035e:	e7fd      	b.n	800035c <idle_task_handler+0x4>

08000360 <init_systick_timer>:
}

void init_systick_timer(uint32_t tick_hz){
 8000360:	b480      	push	{r7}
 8000362:	b087      	sub	sp, #28
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	uint32_t Delay_value = (uint32_t) (SysTick_count_clock/tick_hz)-1;
 8000368:	4a14      	ldr	r2, [pc, #80]	@ (80003bc <init_systick_timer+0x5c>)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000370:	3b01      	subs	r3, #1
 8000372:	617b      	str	r3, [r7, #20]
	uint32_t *pSRVR = (uint32_t*)0XE000E014;
 8000374:	4b12      	ldr	r3, [pc, #72]	@ (80003c0 <init_systick_timer+0x60>)
 8000376:	613b      	str	r3, [r7, #16]
	uint32_t *pSCSR = (uint32_t*)0XE000E010;
 8000378:	4b12      	ldr	r3, [pc, #72]	@ (80003c4 <init_systick_timer+0x64>)
 800037a:	60fb      	str	r3, [r7, #12]
	*pSRVR &= ~(0X00FFFFFF);//since [31:24] are reserved (Clear the register)
 800037c:	693b      	ldr	r3, [r7, #16]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 8000384:	693b      	ldr	r3, [r7, #16]
 8000386:	601a      	str	r2, [r3, #0]
	*pSRVR = Delay_value;//load delay value in SYST_RVR
 8000388:	693b      	ldr	r3, [r7, #16]
 800038a:	697a      	ldr	r2, [r7, #20]
 800038c:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 1);//TICKINT BIT
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f043 0202 	orr.w	r2, r3, #2
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2);//CLK SOURCE BIT
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f043 0204 	orr.w	r2, r3, #4
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 0);//ENABLING THE SYSTICK TIMER [0];
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f043 0201 	orr.w	r2, r3, #1
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	601a      	str	r2, [r3, #0]

}
 80003b2:	bf00      	nop
 80003b4:	371c      	adds	r7, #28
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr
 80003bc:	00f42400 	.word	0x00f42400
 80003c0:	e000e014 	.word	0xe000e014
 80003c4:	e000e010 	.word	0xe000e010

080003c8 <update_global_count>:

void update_global_count(void){
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
	g_tick_count++;
 80003cc:	4b04      	ldr	r3, [pc, #16]	@ (80003e0 <update_global_count+0x18>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	3301      	adds	r3, #1
 80003d2:	4a03      	ldr	r2, [pc, #12]	@ (80003e0 <update_global_count+0x18>)
 80003d4:	6013      	str	r3, [r2, #0]
}
 80003d6:	bf00      	nop
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc80      	pop	{r7}
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	2000007c 	.word	0x2000007c

080003e4 <unblock_task>:

void unblock_task(void){
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
	for(int i=1;i<MAX_TASK;i++){
 80003ea:	2301      	movs	r3, #1
 80003ec:	607b      	str	r3, [r7, #4]
 80003ee:	e019      	b.n	8000424 <unblock_task+0x40>
		if(user_tasks[i].current_state != TASK_READY_STATE){
 80003f0:	4a11      	ldr	r2, [pc, #68]	@ (8000438 <unblock_task+0x54>)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	011b      	lsls	r3, r3, #4
 80003f6:	4413      	add	r3, r2
 80003f8:	3308      	adds	r3, #8
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d00e      	beq.n	800041e <unblock_task+0x3a>
			user_tasks[i].block_count = g_tick_count;
 8000400:	4b0e      	ldr	r3, [pc, #56]	@ (800043c <unblock_task+0x58>)
 8000402:	681a      	ldr	r2, [r3, #0]
 8000404:	490c      	ldr	r1, [pc, #48]	@ (8000438 <unblock_task+0x54>)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	011b      	lsls	r3, r3, #4
 800040a:	440b      	add	r3, r1
 800040c:	3304      	adds	r3, #4
 800040e:	601a      	str	r2, [r3, #0]
			user_tasks[i].current_state = TASK_READY_STATE;
 8000410:	4a09      	ldr	r2, [pc, #36]	@ (8000438 <unblock_task+0x54>)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	011b      	lsls	r3, r3, #4
 8000416:	4413      	add	r3, r2
 8000418:	3308      	adds	r3, #8
 800041a:	2200      	movs	r2, #0
 800041c:	701a      	strb	r2, [r3, #0]
	for(int i=1;i<MAX_TASK;i++){
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	3301      	adds	r3, #1
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	2b04      	cmp	r3, #4
 8000428:	dde2      	ble.n	80003f0 <unblock_task+0xc>
		}
	}
}
 800042a:	bf00      	nop
 800042c:	bf00      	nop
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	20000080 	.word	0x20000080
 800043c:	2000007c 	.word	0x2000007c

08000440 <SysTick_Handler>:

void SysTick_Handler(void){
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 8000446:	4b08      	ldr	r3, [pc, #32]	@ (8000468 <SysTick_Handler+0x28>)
 8000448:	607b      	str	r3, [r7, #4]
	update_global_count();
 800044a:	f7ff ffbd 	bl	80003c8 <update_global_count>
	unblock_task();
 800044e:	f7ff ffc9 	bl	80003e4 <unblock_task>

	//pend PENDSV Exception
	*pICSR |= (1 << 28); //28 th bit of ICSR is to pend PENDSV Exception
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	601a      	str	r2, [r3, #0]
}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	e000ed04 	.word	0xe000ed04

0800046c <PendSV_Handler>:
__attribute ((naked)) void PendSV_Handler(void){
	//Save the context of current task
	__asm volatile("MRS R0,PSP");
 800046c:	f3ef 8009 	mrs	r0, PSP
	__asm volatile("STMDB R0!,{R4-R11}");
 8000470:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile("PUSH {LR}");
 8000474:	b500      	push	{lr}
	__asm volatile("BL save_psp");
 8000476:	f000 f811 	bl	800049c <save_psp>

	//Retrieve context of next task
	__asm volatile("BL update_to_next_psp");
 800047a:	f000 f823 	bl	80004c4 <update_to_next_psp>
	__asm volatile("BL get_psp_value");
 800047e:	f000 f861 	bl	8000544 <get_psp_value>
	__asm volatile("LDMDB R0!,{R4-R11}");
 8000482:	e930 0ff0 	ldmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile("MSR PSP,R0");
 8000486:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 800048a:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 800048e:	4770      	bx	lr



}
 8000490:	bf00      	nop

08000492 <init_schedule_stack>:

__attribute__((naked)) void init_schedule_stack (uint32_t SSP_Top){
 8000492:	4603      	mov	r3, r0
	__asm volatile("MSR MSP,%0"::"r"(SSP_Top));
 8000494:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 8000498:	4770      	bx	lr
}
 800049a:	bf00      	nop

0800049c <save_psp>:

void save_psp(uint32_t current_psp){
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value=current_psp;
 80004a4:	4b05      	ldr	r3, [pc, #20]	@ (80004bc <save_psp+0x20>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a05      	ldr	r2, [pc, #20]	@ (80004c0 <save_psp+0x24>)
 80004aa:	011b      	lsls	r3, r3, #4
 80004ac:	4413      	add	r3, r2
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	601a      	str	r2, [r3, #0]
}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	20000000 	.word	0x20000000
 80004c0:	20000080 	.word	0x20000080

080004c4 <update_to_next_psp>:
void update_to_next_psp(void){
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
	int state=TASK_BLOCKED_STATE;
 80004ca:	23ff      	movs	r3, #255	@ 0xff
 80004cc:	607b      	str	r3, [r7, #4]
	for(int i=0;i<MAX_TASK;i++){
 80004ce:	2300      	movs	r3, #0
 80004d0:	603b      	str	r3, [r7, #0]
 80004d2:	e021      	b.n	8000518 <update_to_next_psp+0x54>
		current_task++;
 80004d4:	4b18      	ldr	r3, [pc, #96]	@ (8000538 <update_to_next_psp+0x74>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	3301      	adds	r3, #1
 80004da:	4a17      	ldr	r2, [pc, #92]	@ (8000538 <update_to_next_psp+0x74>)
 80004dc:	6013      	str	r3, [r2, #0]
		current_task%=MAX_TASK;//round robin fashion
 80004de:	4b16      	ldr	r3, [pc, #88]	@ (8000538 <update_to_next_psp+0x74>)
 80004e0:	6819      	ldr	r1, [r3, #0]
 80004e2:	4b16      	ldr	r3, [pc, #88]	@ (800053c <update_to_next_psp+0x78>)
 80004e4:	fba3 2301 	umull	r2, r3, r3, r1
 80004e8:	089a      	lsrs	r2, r3, #2
 80004ea:	4613      	mov	r3, r2
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	4413      	add	r3, r2
 80004f0:	1aca      	subs	r2, r1, r3
 80004f2:	4b11      	ldr	r3, [pc, #68]	@ (8000538 <update_to_next_psp+0x74>)
 80004f4:	601a      	str	r2, [r3, #0]
		state=user_tasks[i].current_state;
 80004f6:	4a12      	ldr	r2, [pc, #72]	@ (8000540 <update_to_next_psp+0x7c>)
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	011b      	lsls	r3, r3, #4
 80004fc:	4413      	add	r3, r2
 80004fe:	3308      	adds	r3, #8
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	607b      	str	r3, [r7, #4]
		if((state == TASK_READY_STATE) && (current_task != 0))
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d103      	bne.n	8000512 <update_to_next_psp+0x4e>
 800050a:	4b0b      	ldr	r3, [pc, #44]	@ (8000538 <update_to_next_psp+0x74>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d106      	bne.n	8000520 <update_to_next_psp+0x5c>
	for(int i=0;i<MAX_TASK;i++){
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	3301      	adds	r3, #1
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	2b04      	cmp	r3, #4
 800051c:	ddda      	ble.n	80004d4 <update_to_next_psp+0x10>
 800051e:	e000      	b.n	8000522 <update_to_next_psp+0x5e>
			break;
 8000520:	bf00      	nop
	}
	if(state!=TASK_READY_STATE)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d002      	beq.n	800052e <update_to_next_psp+0x6a>
		current_task=0;
 8000528:	4b03      	ldr	r3, [pc, #12]	@ (8000538 <update_to_next_psp+0x74>)
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr
 8000538:	20000000 	.word	0x20000000
 800053c:	cccccccd 	.word	0xcccccccd
 8000540:	20000080 	.word	0x20000080

08000544 <get_psp_value>:
uint32_t get_psp_value(void){
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
	return user_tasks[current_task].psp_value;
 8000548:	4b04      	ldr	r3, [pc, #16]	@ (800055c <get_psp_value+0x18>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a04      	ldr	r2, [pc, #16]	@ (8000560 <get_psp_value+0x1c>)
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	4413      	add	r3, r2
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	20000000 	.word	0x20000000
 8000560:	20000080 	.word	0x20000080

08000564 <init__tasks_stack>:
void init__tasks_stack(void){
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
	uint32_t *pPSP;
	for(int i=0;i<MAX_TASK;i++){
 800056a:	2300      	movs	r3, #0
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	e038      	b.n	80005e2 <init__tasks_stack+0x7e>
		*pPSP = (uint32_t) user_tasks[i].psp_value;
 8000570:	4a20      	ldr	r2, [pc, #128]	@ (80005f4 <init__tasks_stack+0x90>)
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	011b      	lsls	r3, r3, #4
 8000576:	4413      	add	r3, r2
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	601a      	str	r2, [r3, #0]
		//Stack Frame
		pPSP--;//xpsr
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	3b04      	subs	r3, #4
 8000582:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_xPSR;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800058a:	601a      	str	r2, [r3, #0]

		pPSP--;//PC
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	3b04      	subs	r3, #4
 8000590:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t) user_tasks[i].task_handler;
 8000592:	4a18      	ldr	r2, [pc, #96]	@ (80005f4 <init__tasks_stack+0x90>)
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	011b      	lsls	r3, r3, #4
 8000598:	4413      	add	r3, r2
 800059a:	330c      	adds	r3, #12
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	461a      	mov	r2, r3
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	601a      	str	r2, [r3, #0]

		pPSP--;//LR
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	3b04      	subs	r3, #4
 80005a8:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_LR;
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	f06f 0202 	mvn.w	r2, #2
 80005b0:	601a      	str	r2, [r3, #0]

		//R1-R12
		for(int j=0;j<12;j++){
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	e008      	b.n	80005ca <init__tasks_stack+0x66>
			pPSP--;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	3b04      	subs	r3, #4
 80005bc:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
		for(int j=0;j<12;j++){
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	3301      	adds	r3, #1
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2b0b      	cmp	r3, #11
 80005ce:	ddf3      	ble.n	80005b8 <init__tasks_stack+0x54>
		}
		user_tasks[i].psp_value=(uint32_t)pPSP;
 80005d0:	68fa      	ldr	r2, [r7, #12]
 80005d2:	4908      	ldr	r1, [pc, #32]	@ (80005f4 <init__tasks_stack+0x90>)
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	011b      	lsls	r3, r3, #4
 80005d8:	440b      	add	r3, r1
 80005da:	601a      	str	r2, [r3, #0]
	for(int i=0;i<MAX_TASK;i++){
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	3301      	adds	r3, #1
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	2b04      	cmp	r3, #4
 80005e6:	ddc3      	ble.n	8000570 <init__tasks_stack+0xc>
	}
}
 80005e8:	bf00      	nop
 80005ea:	bf00      	nop
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr
 80005f4:	20000080 	.word	0x20000080

080005f8 <enable_processor_fault>:
void enable_processor_fault(void){
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 80005fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <enable_processor_fault+0x38>)
 8000600:	607b      	str	r3, [r7, #4]
	*pSHCSR |=(1<<16);//MemManage
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	601a      	str	r2, [r3, #0]
	*pSHCSR |=(1<<16);//BusFault
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	601a      	str	r2, [r3, #0]
	*pSHCSR |=(1<<16);//UsageFault
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	601a      	str	r2, [r3, #0]
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	e000ed24 	.word	0xe000ed24

08000634 <HardFault_Handler>:

void HardFault_Handler(void){
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	printf("HardFault Exception\n");
 8000638:	4802      	ldr	r0, [pc, #8]	@ (8000644 <HardFault_Handler+0x10>)
 800063a:	f000 fa97 	bl	8000b6c <puts>
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	080012a4 	.word	0x080012a4

08000648 <MemManage_Handler>:

void MemManage_Handler(void){
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	printf("MemManage Exception\n");
 800064c:	4802      	ldr	r0, [pc, #8]	@ (8000658 <MemManage_Handler+0x10>)
 800064e:	f000 fa8d 	bl	8000b6c <puts>
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	080012b8 	.word	0x080012b8

0800065c <BusFault_Handler>:

void BusFault_Handler(void){
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	printf("BusFault Exception\n");
 8000660:	4802      	ldr	r0, [pc, #8]	@ (800066c <BusFault_Handler+0x10>)
 8000662:	f000 fa83 	bl	8000b6c <puts>
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	080012cc 	.word	0x080012cc

08000670 <UsageFault_Handler>:

void UsageFault_Handler(void){
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	printf("UsageFault Exception\n");
 8000674:	4802      	ldr	r0, [pc, #8]	@ (8000680 <UsageFault_Handler+0x10>)
 8000676:	f000 fa79 	bl	8000b6c <puts>
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	080012e0 	.word	0x080012e0

08000684 <switch_sp_to_psp>:

__attribute ((naked)) void switch_sp_to_psp(void){
	__asm volatile("PUSH {LR}");//save the LR to return to main
 8000684:	b500      	push	{lr}
	__asm volatile("BL get_psp_value");//Branch to get psp of task and link the return address
 8000686:	f7ff ff5d 	bl	8000544 <get_psp_value>
	//Now the result is stored in R0
	__asm volatile("MSR PSP,R0");
 800068a:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 800068e:	f85d eb04 	ldr.w	lr, [sp], #4

	//change sp to psp using control
    __asm volatile("MOV R0,#0x02");//set 2nd bit of control register
 8000692:	f04f 0002 	mov.w	r0, #2
    __asm volatile("MSR CONTROL,R0");
 8000696:	f380 8814 	msr	CONTROL, r0
    __asm volatile("BX LR");//since it is a naked function we need to return manually using LR
 800069a:	4770      	bx	lr
}
 800069c:	bf00      	nop
	...

080006a0 <init_tasks>:
void init_tasks(void){
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
	//Initially all the tasks are in raedy state
	user_tasks[0].current_state = TASK_READY_STATE;//Idle task
 80006a4:	4b19      	ldr	r3, [pc, #100]	@ (800070c <init_tasks+0x6c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;//task1
 80006aa:	4b18      	ldr	r3, [pc, #96]	@ (800070c <init_tasks+0x6c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;//task2
 80006b0:	4b16      	ldr	r3, [pc, #88]	@ (800070c <init_tasks+0x6c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	user_tasks[3].current_state = TASK_READY_STATE;//task3
 80006b8:	4b14      	ldr	r3, [pc, #80]	@ (800070c <init_tasks+0x6c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	user_tasks[4].current_state = TASK_READY_STATE;//task4
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <init_tasks+0x6c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

	//Intially the private stack values
	user_tasks[0].psp_value = IDLE_STACK_START;
 80006c8:	4b10      	ldr	r3, [pc, #64]	@ (800070c <init_tasks+0x6c>)
 80006ca:	4a11      	ldr	r2, [pc, #68]	@ (8000710 <init_tasks+0x70>)
 80006cc:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 80006ce:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <init_tasks+0x6c>)
 80006d0:	4a10      	ldr	r2, [pc, #64]	@ (8000714 <init_tasks+0x74>)
 80006d2:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 80006d4:	4b0d      	ldr	r3, [pc, #52]	@ (800070c <init_tasks+0x6c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 80006da:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <init_tasks+0x6c>)
 80006dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000718 <init_tasks+0x78>)
 80006de:	631a      	str	r2, [r3, #48]	@ 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	@ (800070c <init_tasks+0x6c>)
 80006e2:	4a0e      	ldr	r2, [pc, #56]	@ (800071c <init_tasks+0x7c>)
 80006e4:	641a      	str	r2, [r3, #64]	@ 0x40

	//Initialize their task handlers
	user_tasks[0].task_handler = idle_task_handler;
 80006e6:	4b09      	ldr	r3, [pc, #36]	@ (800070c <init_tasks+0x6c>)
 80006e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000720 <init_tasks+0x80>)
 80006ea:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 80006ec:	4b07      	ldr	r3, [pc, #28]	@ (800070c <init_tasks+0x6c>)
 80006ee:	4a0d      	ldr	r2, [pc, #52]	@ (8000724 <init_tasks+0x84>)
 80006f0:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 80006f2:	4b06      	ldr	r3, [pc, #24]	@ (800070c <init_tasks+0x6c>)
 80006f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000728 <init_tasks+0x88>)
 80006f6:	62da      	str	r2, [r3, #44]	@ 0x2c
	user_tasks[3].task_handler = task3_handler;
 80006f8:	4b04      	ldr	r3, [pc, #16]	@ (800070c <init_tasks+0x6c>)
 80006fa:	4a0c      	ldr	r2, [pc, #48]	@ (800072c <init_tasks+0x8c>)
 80006fc:	63da      	str	r2, [r3, #60]	@ 0x3c
	user_tasks[4].task_handler = task4_handler;
 80006fe:	4b03      	ldr	r3, [pc, #12]	@ (800070c <init_tasks+0x6c>)
 8000700:	4a0b      	ldr	r2, [pc, #44]	@ (8000730 <init_tasks+0x90>)
 8000702:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	20000080 	.word	0x20000080
 8000710:	fffff400 	.word	0xfffff400
 8000714:	20020000 	.word	0x20020000
 8000718:	fffffc00 	.word	0xfffffc00
 800071c:	fffff800 	.word	0xfffff800
 8000720:	08000359 	.word	0x08000359
 8000724:	080002d1 	.word	0x080002d1
 8000728:	080002f5 	.word	0x080002f5
 800072c:	08000319 	.word	0x08000319
 8000730:	08000339 	.word	0x08000339

08000734 <task_delay>:

void task_delay(uint32_t tick_count){
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	if (current_task){//if CT is 0 , it is idle task
 800073c:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <task_delay+0x44>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d014      	beq.n	800076e <task_delay+0x3a>
		//block count = global tick count + user stated tick count
		user_tasks[current_task].block_count =  g_tick_count + tick_count ;
 8000744:	4b0d      	ldr	r3, [pc, #52]	@ (800077c <task_delay+0x48>)
 8000746:	6819      	ldr	r1, [r3, #0]
 8000748:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <task_delay+0x44>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	440a      	add	r2, r1
 8000750:	490b      	ldr	r1, [pc, #44]	@ (8000780 <task_delay+0x4c>)
 8000752:	011b      	lsls	r3, r3, #4
 8000754:	440b      	add	r3, r1
 8000756:	3304      	adds	r3, #4
 8000758:	601a      	str	r2, [r3, #0]
		user_tasks[current_task].current_state =  TASK_BLOCKED_STATE ;
 800075a:	4b07      	ldr	r3, [pc, #28]	@ (8000778 <task_delay+0x44>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a08      	ldr	r2, [pc, #32]	@ (8000780 <task_delay+0x4c>)
 8000760:	011b      	lsls	r3, r3, #4
 8000762:	4413      	add	r3, r2
 8000764:	3308      	adds	r3, #8
 8000766:	22ff      	movs	r2, #255	@ 0xff
 8000768:	701a      	strb	r2, [r3, #0]

		//Schedule for next task
		schedule();
 800076a:	f000 f80b 	bl	8000784 <schedule>
	}

}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000000 	.word	0x20000000
 800077c:	2000007c 	.word	0x2000007c
 8000780:	20000080 	.word	0x20000080

08000784 <schedule>:

void schedule(void){
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
	//Pend the PENDSV here
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 800078a:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <schedule+0x20>)
 800078c:	607b      	str	r3, [r7, #4]
	*pICSR |= (1 << 28);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	601a      	str	r2, [r3, #0]

}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	e000ed04 	.word	0xe000ed04

080007a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	e00a      	b.n	80007d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007ba:	f3af 8000 	nop.w
 80007be:	4601      	mov	r1, r0
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	1c5a      	adds	r2, r3, #1
 80007c4:	60ba      	str	r2, [r7, #8]
 80007c6:	b2ca      	uxtb	r2, r1
 80007c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	3301      	adds	r3, #1
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	697a      	ldr	r2, [r7, #20]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	dbf0      	blt.n	80007ba <_read+0x12>
  }

  return len;
 80007d8:	687b      	ldr	r3, [r7, #4]
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b086      	sub	sp, #24
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	60f8      	str	r0, [r7, #12]
 80007ea:	60b9      	str	r1, [r7, #8]
 80007ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	e009      	b.n	8000808 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	1c5a      	adds	r2, r3, #1
 80007f8:	60ba      	str	r2, [r7, #8]
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	3301      	adds	r3, #1
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697a      	ldr	r2, [r7, #20]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	429a      	cmp	r2, r3
 800080e:	dbf1      	blt.n	80007f4 <_write+0x12>
  }
  return len;
 8000810:	687b      	ldr	r3, [r7, #4]
}
 8000812:	4618      	mov	r0, r3
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <_close>:

int _close(int file)
{
 800081a:	b480      	push	{r7}
 800081c:	b083      	sub	sp, #12
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000826:	4618      	mov	r0, r3
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000840:	605a      	str	r2, [r3, #4]
  return 0;
 8000842:	2300      	movs	r3, #0
}
 8000844:	4618      	mov	r0, r3
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr

0800084e <_isatty>:

int _isatty(int file)
{
 800084e:	b480      	push	{r7}
 8000850:	b083      	sub	sp, #12
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000856:	2301      	movs	r3, #1
}
 8000858:	4618      	mov	r0, r3
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr

08000862 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000862:	b480      	push	{r7}
 8000864:	b085      	sub	sp, #20
 8000866:	af00      	add	r7, sp, #0
 8000868:	60f8      	str	r0, [r7, #12]
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800086e:	2300      	movs	r3, #0
}
 8000870:	4618      	mov	r0, r3
 8000872:	3714      	adds	r7, #20
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr
	...

0800087c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000884:	4a14      	ldr	r2, [pc, #80]	@ (80008d8 <_sbrk+0x5c>)
 8000886:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <_sbrk+0x60>)
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000890:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <_sbrk+0x64>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d102      	bne.n	800089e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000898:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <_sbrk+0x64>)
 800089a:	4a12      	ldr	r2, [pc, #72]	@ (80008e4 <_sbrk+0x68>)
 800089c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800089e:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <_sbrk+0x64>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4413      	add	r3, r2
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d207      	bcs.n	80008bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008ac:	f000 fa8c 	bl	8000dc8 <__errno>
 80008b0:	4603      	mov	r3, r0
 80008b2:	220c      	movs	r2, #12
 80008b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ba:	e009      	b.n	80008d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008bc:	4b08      	ldr	r3, [pc, #32]	@ (80008e0 <_sbrk+0x64>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008c2:	4b07      	ldr	r3, [pc, #28]	@ (80008e0 <_sbrk+0x64>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4413      	add	r3, r2
 80008ca:	4a05      	ldr	r2, [pc, #20]	@ (80008e0 <_sbrk+0x64>)
 80008cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ce:	68fb      	ldr	r3, [r7, #12]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20020000 	.word	0x20020000
 80008dc:	00000400 	.word	0x00000400
 80008e0:	200000d0 	.word	0x200000d0
 80008e4:	20000220 	.word	0x20000220

080008e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008e8:	480d      	ldr	r0, [pc, #52]	@ (8000920 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f0:	480c      	ldr	r0, [pc, #48]	@ (8000924 <LoopForever+0x6>)
  ldr r1, =_edata
 80008f2:	490d      	ldr	r1, [pc, #52]	@ (8000928 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f4:	4a0d      	ldr	r2, [pc, #52]	@ (800092c <LoopForever+0xe>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f8:	e002      	b.n	8000900 <LoopCopyDataInit>

080008fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fe:	3304      	adds	r3, #4

08000900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000904:	d3f9      	bcc.n	80008fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000906:	4a0a      	ldr	r2, [pc, #40]	@ (8000930 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000908:	4c0a      	ldr	r4, [pc, #40]	@ (8000934 <LoopForever+0x16>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800090c:	e001      	b.n	8000912 <LoopFillZerobss>

0800090e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000910:	3204      	adds	r2, #4

08000912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000914:	d3fb      	bcc.n	800090e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000916:	f000 fa5d 	bl	8000dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800091a:	f7ff fcbf 	bl	800029c <main>

0800091e <LoopForever>:

LoopForever:
  b LoopForever
 800091e:	e7fe      	b.n	800091e <LoopForever>
  ldr   r0, =_estack
 8000920:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000928:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800092c:	08001300 	.word	0x08001300
  ldr r2, =_sbss
 8000930:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000934:	20000220 	.word	0x20000220

08000938 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000938:	e7fe      	b.n	8000938 <ADC_IRQHandler>
	...

0800093c <std>:
 800093c:	2300      	movs	r3, #0
 800093e:	b510      	push	{r4, lr}
 8000940:	4604      	mov	r4, r0
 8000942:	e9c0 3300 	strd	r3, r3, [r0]
 8000946:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800094a:	6083      	str	r3, [r0, #8]
 800094c:	8181      	strh	r1, [r0, #12]
 800094e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000950:	81c2      	strh	r2, [r0, #14]
 8000952:	6183      	str	r3, [r0, #24]
 8000954:	4619      	mov	r1, r3
 8000956:	2208      	movs	r2, #8
 8000958:	305c      	adds	r0, #92	@ 0x5c
 800095a:	f000 f9e7 	bl	8000d2c <memset>
 800095e:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <std+0x58>)
 8000960:	6263      	str	r3, [r4, #36]	@ 0x24
 8000962:	4b0d      	ldr	r3, [pc, #52]	@ (8000998 <std+0x5c>)
 8000964:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000966:	4b0d      	ldr	r3, [pc, #52]	@ (800099c <std+0x60>)
 8000968:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800096a:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <std+0x64>)
 800096c:	6323      	str	r3, [r4, #48]	@ 0x30
 800096e:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <std+0x68>)
 8000970:	6224      	str	r4, [r4, #32]
 8000972:	429c      	cmp	r4, r3
 8000974:	d006      	beq.n	8000984 <std+0x48>
 8000976:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800097a:	4294      	cmp	r4, r2
 800097c:	d002      	beq.n	8000984 <std+0x48>
 800097e:	33d0      	adds	r3, #208	@ 0xd0
 8000980:	429c      	cmp	r4, r3
 8000982:	d105      	bne.n	8000990 <std+0x54>
 8000984:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800098c:	f000 ba46 	b.w	8000e1c <__retarget_lock_init_recursive>
 8000990:	bd10      	pop	{r4, pc}
 8000992:	bf00      	nop
 8000994:	08000b7d 	.word	0x08000b7d
 8000998:	08000b9f 	.word	0x08000b9f
 800099c:	08000bd7 	.word	0x08000bd7
 80009a0:	08000bfb 	.word	0x08000bfb
 80009a4:	200000d4 	.word	0x200000d4

080009a8 <stdio_exit_handler>:
 80009a8:	4a02      	ldr	r2, [pc, #8]	@ (80009b4 <stdio_exit_handler+0xc>)
 80009aa:	4903      	ldr	r1, [pc, #12]	@ (80009b8 <stdio_exit_handler+0x10>)
 80009ac:	4803      	ldr	r0, [pc, #12]	@ (80009bc <stdio_exit_handler+0x14>)
 80009ae:	f000 b869 	b.w	8000a84 <_fwalk_sglue>
 80009b2:	bf00      	nop
 80009b4:	20000004 	.word	0x20000004
 80009b8:	08001115 	.word	0x08001115
 80009bc:	20000014 	.word	0x20000014

080009c0 <cleanup_stdio>:
 80009c0:	6841      	ldr	r1, [r0, #4]
 80009c2:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <cleanup_stdio+0x34>)
 80009c4:	4299      	cmp	r1, r3
 80009c6:	b510      	push	{r4, lr}
 80009c8:	4604      	mov	r4, r0
 80009ca:	d001      	beq.n	80009d0 <cleanup_stdio+0x10>
 80009cc:	f000 fba2 	bl	8001114 <_fflush_r>
 80009d0:	68a1      	ldr	r1, [r4, #8]
 80009d2:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <cleanup_stdio+0x38>)
 80009d4:	4299      	cmp	r1, r3
 80009d6:	d002      	beq.n	80009de <cleanup_stdio+0x1e>
 80009d8:	4620      	mov	r0, r4
 80009da:	f000 fb9b 	bl	8001114 <_fflush_r>
 80009de:	68e1      	ldr	r1, [r4, #12]
 80009e0:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <cleanup_stdio+0x3c>)
 80009e2:	4299      	cmp	r1, r3
 80009e4:	d004      	beq.n	80009f0 <cleanup_stdio+0x30>
 80009e6:	4620      	mov	r0, r4
 80009e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009ec:	f000 bb92 	b.w	8001114 <_fflush_r>
 80009f0:	bd10      	pop	{r4, pc}
 80009f2:	bf00      	nop
 80009f4:	200000d4 	.word	0x200000d4
 80009f8:	2000013c 	.word	0x2000013c
 80009fc:	200001a4 	.word	0x200001a4

08000a00 <global_stdio_init.part.0>:
 8000a00:	b510      	push	{r4, lr}
 8000a02:	4b0b      	ldr	r3, [pc, #44]	@ (8000a30 <global_stdio_init.part.0+0x30>)
 8000a04:	4c0b      	ldr	r4, [pc, #44]	@ (8000a34 <global_stdio_init.part.0+0x34>)
 8000a06:	4a0c      	ldr	r2, [pc, #48]	@ (8000a38 <global_stdio_init.part.0+0x38>)
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	4620      	mov	r0, r4
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2104      	movs	r1, #4
 8000a10:	f7ff ff94 	bl	800093c <std>
 8000a14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2109      	movs	r1, #9
 8000a1c:	f7ff ff8e 	bl	800093c <std>
 8000a20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000a24:	2202      	movs	r2, #2
 8000a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a2a:	2112      	movs	r1, #18
 8000a2c:	f7ff bf86 	b.w	800093c <std>
 8000a30:	2000020c 	.word	0x2000020c
 8000a34:	200000d4 	.word	0x200000d4
 8000a38:	080009a9 	.word	0x080009a9

08000a3c <__sfp_lock_acquire>:
 8000a3c:	4801      	ldr	r0, [pc, #4]	@ (8000a44 <__sfp_lock_acquire+0x8>)
 8000a3e:	f000 b9ee 	b.w	8000e1e <__retarget_lock_acquire_recursive>
 8000a42:	bf00      	nop
 8000a44:	20000215 	.word	0x20000215

08000a48 <__sfp_lock_release>:
 8000a48:	4801      	ldr	r0, [pc, #4]	@ (8000a50 <__sfp_lock_release+0x8>)
 8000a4a:	f000 b9e9 	b.w	8000e20 <__retarget_lock_release_recursive>
 8000a4e:	bf00      	nop
 8000a50:	20000215 	.word	0x20000215

08000a54 <__sinit>:
 8000a54:	b510      	push	{r4, lr}
 8000a56:	4604      	mov	r4, r0
 8000a58:	f7ff fff0 	bl	8000a3c <__sfp_lock_acquire>
 8000a5c:	6a23      	ldr	r3, [r4, #32]
 8000a5e:	b11b      	cbz	r3, 8000a68 <__sinit+0x14>
 8000a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a64:	f7ff bff0 	b.w	8000a48 <__sfp_lock_release>
 8000a68:	4b04      	ldr	r3, [pc, #16]	@ (8000a7c <__sinit+0x28>)
 8000a6a:	6223      	str	r3, [r4, #32]
 8000a6c:	4b04      	ldr	r3, [pc, #16]	@ (8000a80 <__sinit+0x2c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d1f5      	bne.n	8000a60 <__sinit+0xc>
 8000a74:	f7ff ffc4 	bl	8000a00 <global_stdio_init.part.0>
 8000a78:	e7f2      	b.n	8000a60 <__sinit+0xc>
 8000a7a:	bf00      	nop
 8000a7c:	080009c1 	.word	0x080009c1
 8000a80:	2000020c 	.word	0x2000020c

08000a84 <_fwalk_sglue>:
 8000a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a88:	4607      	mov	r7, r0
 8000a8a:	4688      	mov	r8, r1
 8000a8c:	4614      	mov	r4, r2
 8000a8e:	2600      	movs	r6, #0
 8000a90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000a94:	f1b9 0901 	subs.w	r9, r9, #1
 8000a98:	d505      	bpl.n	8000aa6 <_fwalk_sglue+0x22>
 8000a9a:	6824      	ldr	r4, [r4, #0]
 8000a9c:	2c00      	cmp	r4, #0
 8000a9e:	d1f7      	bne.n	8000a90 <_fwalk_sglue+0xc>
 8000aa0:	4630      	mov	r0, r6
 8000aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000aa6:	89ab      	ldrh	r3, [r5, #12]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d907      	bls.n	8000abc <_fwalk_sglue+0x38>
 8000aac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	d003      	beq.n	8000abc <_fwalk_sglue+0x38>
 8000ab4:	4629      	mov	r1, r5
 8000ab6:	4638      	mov	r0, r7
 8000ab8:	47c0      	blx	r8
 8000aba:	4306      	orrs	r6, r0
 8000abc:	3568      	adds	r5, #104	@ 0x68
 8000abe:	e7e9      	b.n	8000a94 <_fwalk_sglue+0x10>

08000ac0 <_puts_r>:
 8000ac0:	6a03      	ldr	r3, [r0, #32]
 8000ac2:	b570      	push	{r4, r5, r6, lr}
 8000ac4:	6884      	ldr	r4, [r0, #8]
 8000ac6:	4605      	mov	r5, r0
 8000ac8:	460e      	mov	r6, r1
 8000aca:	b90b      	cbnz	r3, 8000ad0 <_puts_r+0x10>
 8000acc:	f7ff ffc2 	bl	8000a54 <__sinit>
 8000ad0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000ad2:	07db      	lsls	r3, r3, #31
 8000ad4:	d405      	bmi.n	8000ae2 <_puts_r+0x22>
 8000ad6:	89a3      	ldrh	r3, [r4, #12]
 8000ad8:	0598      	lsls	r0, r3, #22
 8000ada:	d402      	bmi.n	8000ae2 <_puts_r+0x22>
 8000adc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000ade:	f000 f99e 	bl	8000e1e <__retarget_lock_acquire_recursive>
 8000ae2:	89a3      	ldrh	r3, [r4, #12]
 8000ae4:	0719      	lsls	r1, r3, #28
 8000ae6:	d502      	bpl.n	8000aee <_puts_r+0x2e>
 8000ae8:	6923      	ldr	r3, [r4, #16]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d135      	bne.n	8000b5a <_puts_r+0x9a>
 8000aee:	4621      	mov	r1, r4
 8000af0:	4628      	mov	r0, r5
 8000af2:	f000 f8c5 	bl	8000c80 <__swsetup_r>
 8000af6:	b380      	cbz	r0, 8000b5a <_puts_r+0x9a>
 8000af8:	f04f 35ff 	mov.w	r5, #4294967295
 8000afc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000afe:	07da      	lsls	r2, r3, #31
 8000b00:	d405      	bmi.n	8000b0e <_puts_r+0x4e>
 8000b02:	89a3      	ldrh	r3, [r4, #12]
 8000b04:	059b      	lsls	r3, r3, #22
 8000b06:	d402      	bmi.n	8000b0e <_puts_r+0x4e>
 8000b08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000b0a:	f000 f989 	bl	8000e20 <__retarget_lock_release_recursive>
 8000b0e:	4628      	mov	r0, r5
 8000b10:	bd70      	pop	{r4, r5, r6, pc}
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	da04      	bge.n	8000b20 <_puts_r+0x60>
 8000b16:	69a2      	ldr	r2, [r4, #24]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	dc17      	bgt.n	8000b4c <_puts_r+0x8c>
 8000b1c:	290a      	cmp	r1, #10
 8000b1e:	d015      	beq.n	8000b4c <_puts_r+0x8c>
 8000b20:	6823      	ldr	r3, [r4, #0]
 8000b22:	1c5a      	adds	r2, r3, #1
 8000b24:	6022      	str	r2, [r4, #0]
 8000b26:	7019      	strb	r1, [r3, #0]
 8000b28:	68a3      	ldr	r3, [r4, #8]
 8000b2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	60a3      	str	r3, [r4, #8]
 8000b32:	2900      	cmp	r1, #0
 8000b34:	d1ed      	bne.n	8000b12 <_puts_r+0x52>
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	da11      	bge.n	8000b5e <_puts_r+0x9e>
 8000b3a:	4622      	mov	r2, r4
 8000b3c:	210a      	movs	r1, #10
 8000b3e:	4628      	mov	r0, r5
 8000b40:	f000 f85f 	bl	8000c02 <__swbuf_r>
 8000b44:	3001      	adds	r0, #1
 8000b46:	d0d7      	beq.n	8000af8 <_puts_r+0x38>
 8000b48:	250a      	movs	r5, #10
 8000b4a:	e7d7      	b.n	8000afc <_puts_r+0x3c>
 8000b4c:	4622      	mov	r2, r4
 8000b4e:	4628      	mov	r0, r5
 8000b50:	f000 f857 	bl	8000c02 <__swbuf_r>
 8000b54:	3001      	adds	r0, #1
 8000b56:	d1e7      	bne.n	8000b28 <_puts_r+0x68>
 8000b58:	e7ce      	b.n	8000af8 <_puts_r+0x38>
 8000b5a:	3e01      	subs	r6, #1
 8000b5c:	e7e4      	b.n	8000b28 <_puts_r+0x68>
 8000b5e:	6823      	ldr	r3, [r4, #0]
 8000b60:	1c5a      	adds	r2, r3, #1
 8000b62:	6022      	str	r2, [r4, #0]
 8000b64:	220a      	movs	r2, #10
 8000b66:	701a      	strb	r2, [r3, #0]
 8000b68:	e7ee      	b.n	8000b48 <_puts_r+0x88>
	...

08000b6c <puts>:
 8000b6c:	4b02      	ldr	r3, [pc, #8]	@ (8000b78 <puts+0xc>)
 8000b6e:	4601      	mov	r1, r0
 8000b70:	6818      	ldr	r0, [r3, #0]
 8000b72:	f7ff bfa5 	b.w	8000ac0 <_puts_r>
 8000b76:	bf00      	nop
 8000b78:	20000010 	.word	0x20000010

08000b7c <__sread>:
 8000b7c:	b510      	push	{r4, lr}
 8000b7e:	460c      	mov	r4, r1
 8000b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b84:	f000 f8fc 	bl	8000d80 <_read_r>
 8000b88:	2800      	cmp	r0, #0
 8000b8a:	bfab      	itete	ge
 8000b8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000b8e:	89a3      	ldrhlt	r3, [r4, #12]
 8000b90:	181b      	addge	r3, r3, r0
 8000b92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000b96:	bfac      	ite	ge
 8000b98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000b9a:	81a3      	strhlt	r3, [r4, #12]
 8000b9c:	bd10      	pop	{r4, pc}

08000b9e <__swrite>:
 8000b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ba2:	461f      	mov	r7, r3
 8000ba4:	898b      	ldrh	r3, [r1, #12]
 8000ba6:	05db      	lsls	r3, r3, #23
 8000ba8:	4605      	mov	r5, r0
 8000baa:	460c      	mov	r4, r1
 8000bac:	4616      	mov	r6, r2
 8000bae:	d505      	bpl.n	8000bbc <__swrite+0x1e>
 8000bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f000 f8d0 	bl	8000d5c <_lseek_r>
 8000bbc:	89a3      	ldrh	r3, [r4, #12]
 8000bbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000bc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000bc6:	81a3      	strh	r3, [r4, #12]
 8000bc8:	4632      	mov	r2, r6
 8000bca:	463b      	mov	r3, r7
 8000bcc:	4628      	mov	r0, r5
 8000bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000bd2:	f000 b8e7 	b.w	8000da4 <_write_r>

08000bd6 <__sseek>:
 8000bd6:	b510      	push	{r4, lr}
 8000bd8:	460c      	mov	r4, r1
 8000bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bde:	f000 f8bd 	bl	8000d5c <_lseek_r>
 8000be2:	1c43      	adds	r3, r0, #1
 8000be4:	89a3      	ldrh	r3, [r4, #12]
 8000be6:	bf15      	itete	ne
 8000be8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000bea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000bee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000bf2:	81a3      	strheq	r3, [r4, #12]
 8000bf4:	bf18      	it	ne
 8000bf6:	81a3      	strhne	r3, [r4, #12]
 8000bf8:	bd10      	pop	{r4, pc}

08000bfa <__sclose>:
 8000bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bfe:	f000 b89d 	b.w	8000d3c <_close_r>

08000c02 <__swbuf_r>:
 8000c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c04:	460e      	mov	r6, r1
 8000c06:	4614      	mov	r4, r2
 8000c08:	4605      	mov	r5, r0
 8000c0a:	b118      	cbz	r0, 8000c14 <__swbuf_r+0x12>
 8000c0c:	6a03      	ldr	r3, [r0, #32]
 8000c0e:	b90b      	cbnz	r3, 8000c14 <__swbuf_r+0x12>
 8000c10:	f7ff ff20 	bl	8000a54 <__sinit>
 8000c14:	69a3      	ldr	r3, [r4, #24]
 8000c16:	60a3      	str	r3, [r4, #8]
 8000c18:	89a3      	ldrh	r3, [r4, #12]
 8000c1a:	071a      	lsls	r2, r3, #28
 8000c1c:	d501      	bpl.n	8000c22 <__swbuf_r+0x20>
 8000c1e:	6923      	ldr	r3, [r4, #16]
 8000c20:	b943      	cbnz	r3, 8000c34 <__swbuf_r+0x32>
 8000c22:	4621      	mov	r1, r4
 8000c24:	4628      	mov	r0, r5
 8000c26:	f000 f82b 	bl	8000c80 <__swsetup_r>
 8000c2a:	b118      	cbz	r0, 8000c34 <__swbuf_r+0x32>
 8000c2c:	f04f 37ff 	mov.w	r7, #4294967295
 8000c30:	4638      	mov	r0, r7
 8000c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c34:	6823      	ldr	r3, [r4, #0]
 8000c36:	6922      	ldr	r2, [r4, #16]
 8000c38:	1a98      	subs	r0, r3, r2
 8000c3a:	6963      	ldr	r3, [r4, #20]
 8000c3c:	b2f6      	uxtb	r6, r6
 8000c3e:	4283      	cmp	r3, r0
 8000c40:	4637      	mov	r7, r6
 8000c42:	dc05      	bgt.n	8000c50 <__swbuf_r+0x4e>
 8000c44:	4621      	mov	r1, r4
 8000c46:	4628      	mov	r0, r5
 8000c48:	f000 fa64 	bl	8001114 <_fflush_r>
 8000c4c:	2800      	cmp	r0, #0
 8000c4e:	d1ed      	bne.n	8000c2c <__swbuf_r+0x2a>
 8000c50:	68a3      	ldr	r3, [r4, #8]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	60a3      	str	r3, [r4, #8]
 8000c56:	6823      	ldr	r3, [r4, #0]
 8000c58:	1c5a      	adds	r2, r3, #1
 8000c5a:	6022      	str	r2, [r4, #0]
 8000c5c:	701e      	strb	r6, [r3, #0]
 8000c5e:	6962      	ldr	r2, [r4, #20]
 8000c60:	1c43      	adds	r3, r0, #1
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__swbuf_r+0x6e>
 8000c66:	89a3      	ldrh	r3, [r4, #12]
 8000c68:	07db      	lsls	r3, r3, #31
 8000c6a:	d5e1      	bpl.n	8000c30 <__swbuf_r+0x2e>
 8000c6c:	2e0a      	cmp	r6, #10
 8000c6e:	d1df      	bne.n	8000c30 <__swbuf_r+0x2e>
 8000c70:	4621      	mov	r1, r4
 8000c72:	4628      	mov	r0, r5
 8000c74:	f000 fa4e 	bl	8001114 <_fflush_r>
 8000c78:	2800      	cmp	r0, #0
 8000c7a:	d0d9      	beq.n	8000c30 <__swbuf_r+0x2e>
 8000c7c:	e7d6      	b.n	8000c2c <__swbuf_r+0x2a>
	...

08000c80 <__swsetup_r>:
 8000c80:	b538      	push	{r3, r4, r5, lr}
 8000c82:	4b29      	ldr	r3, [pc, #164]	@ (8000d28 <__swsetup_r+0xa8>)
 8000c84:	4605      	mov	r5, r0
 8000c86:	6818      	ldr	r0, [r3, #0]
 8000c88:	460c      	mov	r4, r1
 8000c8a:	b118      	cbz	r0, 8000c94 <__swsetup_r+0x14>
 8000c8c:	6a03      	ldr	r3, [r0, #32]
 8000c8e:	b90b      	cbnz	r3, 8000c94 <__swsetup_r+0x14>
 8000c90:	f7ff fee0 	bl	8000a54 <__sinit>
 8000c94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c98:	0719      	lsls	r1, r3, #28
 8000c9a:	d422      	bmi.n	8000ce2 <__swsetup_r+0x62>
 8000c9c:	06da      	lsls	r2, r3, #27
 8000c9e:	d407      	bmi.n	8000cb0 <__swsetup_r+0x30>
 8000ca0:	2209      	movs	r2, #9
 8000ca2:	602a      	str	r2, [r5, #0]
 8000ca4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ca8:	81a3      	strh	r3, [r4, #12]
 8000caa:	f04f 30ff 	mov.w	r0, #4294967295
 8000cae:	e033      	b.n	8000d18 <__swsetup_r+0x98>
 8000cb0:	0758      	lsls	r0, r3, #29
 8000cb2:	d512      	bpl.n	8000cda <__swsetup_r+0x5a>
 8000cb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000cb6:	b141      	cbz	r1, 8000cca <__swsetup_r+0x4a>
 8000cb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000cbc:	4299      	cmp	r1, r3
 8000cbe:	d002      	beq.n	8000cc6 <__swsetup_r+0x46>
 8000cc0:	4628      	mov	r0, r5
 8000cc2:	f000 f8af 	bl	8000e24 <_free_r>
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8000cca:	89a3      	ldrh	r3, [r4, #12]
 8000ccc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000cd0:	81a3      	strh	r3, [r4, #12]
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	6063      	str	r3, [r4, #4]
 8000cd6:	6923      	ldr	r3, [r4, #16]
 8000cd8:	6023      	str	r3, [r4, #0]
 8000cda:	89a3      	ldrh	r3, [r4, #12]
 8000cdc:	f043 0308 	orr.w	r3, r3, #8
 8000ce0:	81a3      	strh	r3, [r4, #12]
 8000ce2:	6923      	ldr	r3, [r4, #16]
 8000ce4:	b94b      	cbnz	r3, 8000cfa <__swsetup_r+0x7a>
 8000ce6:	89a3      	ldrh	r3, [r4, #12]
 8000ce8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000cec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000cf0:	d003      	beq.n	8000cfa <__swsetup_r+0x7a>
 8000cf2:	4621      	mov	r1, r4
 8000cf4:	4628      	mov	r0, r5
 8000cf6:	f000 fa5b 	bl	80011b0 <__smakebuf_r>
 8000cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cfe:	f013 0201 	ands.w	r2, r3, #1
 8000d02:	d00a      	beq.n	8000d1a <__swsetup_r+0x9a>
 8000d04:	2200      	movs	r2, #0
 8000d06:	60a2      	str	r2, [r4, #8]
 8000d08:	6962      	ldr	r2, [r4, #20]
 8000d0a:	4252      	negs	r2, r2
 8000d0c:	61a2      	str	r2, [r4, #24]
 8000d0e:	6922      	ldr	r2, [r4, #16]
 8000d10:	b942      	cbnz	r2, 8000d24 <__swsetup_r+0xa4>
 8000d12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000d16:	d1c5      	bne.n	8000ca4 <__swsetup_r+0x24>
 8000d18:	bd38      	pop	{r3, r4, r5, pc}
 8000d1a:	0799      	lsls	r1, r3, #30
 8000d1c:	bf58      	it	pl
 8000d1e:	6962      	ldrpl	r2, [r4, #20]
 8000d20:	60a2      	str	r2, [r4, #8]
 8000d22:	e7f4      	b.n	8000d0e <__swsetup_r+0x8e>
 8000d24:	2000      	movs	r0, #0
 8000d26:	e7f7      	b.n	8000d18 <__swsetup_r+0x98>
 8000d28:	20000010 	.word	0x20000010

08000d2c <memset>:
 8000d2c:	4402      	add	r2, r0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d100      	bne.n	8000d36 <memset+0xa>
 8000d34:	4770      	bx	lr
 8000d36:	f803 1b01 	strb.w	r1, [r3], #1
 8000d3a:	e7f9      	b.n	8000d30 <memset+0x4>

08000d3c <_close_r>:
 8000d3c:	b538      	push	{r3, r4, r5, lr}
 8000d3e:	4d06      	ldr	r5, [pc, #24]	@ (8000d58 <_close_r+0x1c>)
 8000d40:	2300      	movs	r3, #0
 8000d42:	4604      	mov	r4, r0
 8000d44:	4608      	mov	r0, r1
 8000d46:	602b      	str	r3, [r5, #0]
 8000d48:	f7ff fd67 	bl	800081a <_close>
 8000d4c:	1c43      	adds	r3, r0, #1
 8000d4e:	d102      	bne.n	8000d56 <_close_r+0x1a>
 8000d50:	682b      	ldr	r3, [r5, #0]
 8000d52:	b103      	cbz	r3, 8000d56 <_close_r+0x1a>
 8000d54:	6023      	str	r3, [r4, #0]
 8000d56:	bd38      	pop	{r3, r4, r5, pc}
 8000d58:	20000210 	.word	0x20000210

08000d5c <_lseek_r>:
 8000d5c:	b538      	push	{r3, r4, r5, lr}
 8000d5e:	4d07      	ldr	r5, [pc, #28]	@ (8000d7c <_lseek_r+0x20>)
 8000d60:	4604      	mov	r4, r0
 8000d62:	4608      	mov	r0, r1
 8000d64:	4611      	mov	r1, r2
 8000d66:	2200      	movs	r2, #0
 8000d68:	602a      	str	r2, [r5, #0]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	f7ff fd79 	bl	8000862 <_lseek>
 8000d70:	1c43      	adds	r3, r0, #1
 8000d72:	d102      	bne.n	8000d7a <_lseek_r+0x1e>
 8000d74:	682b      	ldr	r3, [r5, #0]
 8000d76:	b103      	cbz	r3, 8000d7a <_lseek_r+0x1e>
 8000d78:	6023      	str	r3, [r4, #0]
 8000d7a:	bd38      	pop	{r3, r4, r5, pc}
 8000d7c:	20000210 	.word	0x20000210

08000d80 <_read_r>:
 8000d80:	b538      	push	{r3, r4, r5, lr}
 8000d82:	4d07      	ldr	r5, [pc, #28]	@ (8000da0 <_read_r+0x20>)
 8000d84:	4604      	mov	r4, r0
 8000d86:	4608      	mov	r0, r1
 8000d88:	4611      	mov	r1, r2
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	602a      	str	r2, [r5, #0]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	f7ff fd0a 	bl	80007a8 <_read>
 8000d94:	1c43      	adds	r3, r0, #1
 8000d96:	d102      	bne.n	8000d9e <_read_r+0x1e>
 8000d98:	682b      	ldr	r3, [r5, #0]
 8000d9a:	b103      	cbz	r3, 8000d9e <_read_r+0x1e>
 8000d9c:	6023      	str	r3, [r4, #0]
 8000d9e:	bd38      	pop	{r3, r4, r5, pc}
 8000da0:	20000210 	.word	0x20000210

08000da4 <_write_r>:
 8000da4:	b538      	push	{r3, r4, r5, lr}
 8000da6:	4d07      	ldr	r5, [pc, #28]	@ (8000dc4 <_write_r+0x20>)
 8000da8:	4604      	mov	r4, r0
 8000daa:	4608      	mov	r0, r1
 8000dac:	4611      	mov	r1, r2
 8000dae:	2200      	movs	r2, #0
 8000db0:	602a      	str	r2, [r5, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	f7ff fd15 	bl	80007e2 <_write>
 8000db8:	1c43      	adds	r3, r0, #1
 8000dba:	d102      	bne.n	8000dc2 <_write_r+0x1e>
 8000dbc:	682b      	ldr	r3, [r5, #0]
 8000dbe:	b103      	cbz	r3, 8000dc2 <_write_r+0x1e>
 8000dc0:	6023      	str	r3, [r4, #0]
 8000dc2:	bd38      	pop	{r3, r4, r5, pc}
 8000dc4:	20000210 	.word	0x20000210

08000dc8 <__errno>:
 8000dc8:	4b01      	ldr	r3, [pc, #4]	@ (8000dd0 <__errno+0x8>)
 8000dca:	6818      	ldr	r0, [r3, #0]
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000010 	.word	0x20000010

08000dd4 <__libc_init_array>:
 8000dd4:	b570      	push	{r4, r5, r6, lr}
 8000dd6:	4d0d      	ldr	r5, [pc, #52]	@ (8000e0c <__libc_init_array+0x38>)
 8000dd8:	4c0d      	ldr	r4, [pc, #52]	@ (8000e10 <__libc_init_array+0x3c>)
 8000dda:	1b64      	subs	r4, r4, r5
 8000ddc:	10a4      	asrs	r4, r4, #2
 8000dde:	2600      	movs	r6, #0
 8000de0:	42a6      	cmp	r6, r4
 8000de2:	d109      	bne.n	8000df8 <__libc_init_array+0x24>
 8000de4:	4d0b      	ldr	r5, [pc, #44]	@ (8000e14 <__libc_init_array+0x40>)
 8000de6:	4c0c      	ldr	r4, [pc, #48]	@ (8000e18 <__libc_init_array+0x44>)
 8000de8:	f000 fa50 	bl	800128c <_init>
 8000dec:	1b64      	subs	r4, r4, r5
 8000dee:	10a4      	asrs	r4, r4, #2
 8000df0:	2600      	movs	r6, #0
 8000df2:	42a6      	cmp	r6, r4
 8000df4:	d105      	bne.n	8000e02 <__libc_init_array+0x2e>
 8000df6:	bd70      	pop	{r4, r5, r6, pc}
 8000df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dfc:	4798      	blx	r3
 8000dfe:	3601      	adds	r6, #1
 8000e00:	e7ee      	b.n	8000de0 <__libc_init_array+0xc>
 8000e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e06:	4798      	blx	r3
 8000e08:	3601      	adds	r6, #1
 8000e0a:	e7f2      	b.n	8000df2 <__libc_init_array+0x1e>
 8000e0c:	080012f8 	.word	0x080012f8
 8000e10:	080012f8 	.word	0x080012f8
 8000e14:	080012f8 	.word	0x080012f8
 8000e18:	080012fc 	.word	0x080012fc

08000e1c <__retarget_lock_init_recursive>:
 8000e1c:	4770      	bx	lr

08000e1e <__retarget_lock_acquire_recursive>:
 8000e1e:	4770      	bx	lr

08000e20 <__retarget_lock_release_recursive>:
 8000e20:	4770      	bx	lr
	...

08000e24 <_free_r>:
 8000e24:	b538      	push	{r3, r4, r5, lr}
 8000e26:	4605      	mov	r5, r0
 8000e28:	2900      	cmp	r1, #0
 8000e2a:	d041      	beq.n	8000eb0 <_free_r+0x8c>
 8000e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e30:	1f0c      	subs	r4, r1, #4
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	bfb8      	it	lt
 8000e36:	18e4      	addlt	r4, r4, r3
 8000e38:	f000 f8e0 	bl	8000ffc <__malloc_lock>
 8000e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8000eb4 <_free_r+0x90>)
 8000e3e:	6813      	ldr	r3, [r2, #0]
 8000e40:	b933      	cbnz	r3, 8000e50 <_free_r+0x2c>
 8000e42:	6063      	str	r3, [r4, #4]
 8000e44:	6014      	str	r4, [r2, #0]
 8000e46:	4628      	mov	r0, r5
 8000e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e4c:	f000 b8dc 	b.w	8001008 <__malloc_unlock>
 8000e50:	42a3      	cmp	r3, r4
 8000e52:	d908      	bls.n	8000e66 <_free_r+0x42>
 8000e54:	6820      	ldr	r0, [r4, #0]
 8000e56:	1821      	adds	r1, r4, r0
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf01      	itttt	eq
 8000e5c:	6819      	ldreq	r1, [r3, #0]
 8000e5e:	685b      	ldreq	r3, [r3, #4]
 8000e60:	1809      	addeq	r1, r1, r0
 8000e62:	6021      	streq	r1, [r4, #0]
 8000e64:	e7ed      	b.n	8000e42 <_free_r+0x1e>
 8000e66:	461a      	mov	r2, r3
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	b10b      	cbz	r3, 8000e70 <_free_r+0x4c>
 8000e6c:	42a3      	cmp	r3, r4
 8000e6e:	d9fa      	bls.n	8000e66 <_free_r+0x42>
 8000e70:	6811      	ldr	r1, [r2, #0]
 8000e72:	1850      	adds	r0, r2, r1
 8000e74:	42a0      	cmp	r0, r4
 8000e76:	d10b      	bne.n	8000e90 <_free_r+0x6c>
 8000e78:	6820      	ldr	r0, [r4, #0]
 8000e7a:	4401      	add	r1, r0
 8000e7c:	1850      	adds	r0, r2, r1
 8000e7e:	4283      	cmp	r3, r0
 8000e80:	6011      	str	r1, [r2, #0]
 8000e82:	d1e0      	bne.n	8000e46 <_free_r+0x22>
 8000e84:	6818      	ldr	r0, [r3, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	6053      	str	r3, [r2, #4]
 8000e8a:	4408      	add	r0, r1
 8000e8c:	6010      	str	r0, [r2, #0]
 8000e8e:	e7da      	b.n	8000e46 <_free_r+0x22>
 8000e90:	d902      	bls.n	8000e98 <_free_r+0x74>
 8000e92:	230c      	movs	r3, #12
 8000e94:	602b      	str	r3, [r5, #0]
 8000e96:	e7d6      	b.n	8000e46 <_free_r+0x22>
 8000e98:	6820      	ldr	r0, [r4, #0]
 8000e9a:	1821      	adds	r1, r4, r0
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	bf04      	itt	eq
 8000ea0:	6819      	ldreq	r1, [r3, #0]
 8000ea2:	685b      	ldreq	r3, [r3, #4]
 8000ea4:	6063      	str	r3, [r4, #4]
 8000ea6:	bf04      	itt	eq
 8000ea8:	1809      	addeq	r1, r1, r0
 8000eaa:	6021      	streq	r1, [r4, #0]
 8000eac:	6054      	str	r4, [r2, #4]
 8000eae:	e7ca      	b.n	8000e46 <_free_r+0x22>
 8000eb0:	bd38      	pop	{r3, r4, r5, pc}
 8000eb2:	bf00      	nop
 8000eb4:	2000021c 	.word	0x2000021c

08000eb8 <sbrk_aligned>:
 8000eb8:	b570      	push	{r4, r5, r6, lr}
 8000eba:	4e0f      	ldr	r6, [pc, #60]	@ (8000ef8 <sbrk_aligned+0x40>)
 8000ebc:	460c      	mov	r4, r1
 8000ebe:	6831      	ldr	r1, [r6, #0]
 8000ec0:	4605      	mov	r5, r0
 8000ec2:	b911      	cbnz	r1, 8000eca <sbrk_aligned+0x12>
 8000ec4:	f000 f9d2 	bl	800126c <_sbrk_r>
 8000ec8:	6030      	str	r0, [r6, #0]
 8000eca:	4621      	mov	r1, r4
 8000ecc:	4628      	mov	r0, r5
 8000ece:	f000 f9cd 	bl	800126c <_sbrk_r>
 8000ed2:	1c43      	adds	r3, r0, #1
 8000ed4:	d103      	bne.n	8000ede <sbrk_aligned+0x26>
 8000ed6:	f04f 34ff 	mov.w	r4, #4294967295
 8000eda:	4620      	mov	r0, r4
 8000edc:	bd70      	pop	{r4, r5, r6, pc}
 8000ede:	1cc4      	adds	r4, r0, #3
 8000ee0:	f024 0403 	bic.w	r4, r4, #3
 8000ee4:	42a0      	cmp	r0, r4
 8000ee6:	d0f8      	beq.n	8000eda <sbrk_aligned+0x22>
 8000ee8:	1a21      	subs	r1, r4, r0
 8000eea:	4628      	mov	r0, r5
 8000eec:	f000 f9be 	bl	800126c <_sbrk_r>
 8000ef0:	3001      	adds	r0, #1
 8000ef2:	d1f2      	bne.n	8000eda <sbrk_aligned+0x22>
 8000ef4:	e7ef      	b.n	8000ed6 <sbrk_aligned+0x1e>
 8000ef6:	bf00      	nop
 8000ef8:	20000218 	.word	0x20000218

08000efc <_malloc_r>:
 8000efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f00:	1ccd      	adds	r5, r1, #3
 8000f02:	f025 0503 	bic.w	r5, r5, #3
 8000f06:	3508      	adds	r5, #8
 8000f08:	2d0c      	cmp	r5, #12
 8000f0a:	bf38      	it	cc
 8000f0c:	250c      	movcc	r5, #12
 8000f0e:	2d00      	cmp	r5, #0
 8000f10:	4606      	mov	r6, r0
 8000f12:	db01      	blt.n	8000f18 <_malloc_r+0x1c>
 8000f14:	42a9      	cmp	r1, r5
 8000f16:	d904      	bls.n	8000f22 <_malloc_r+0x26>
 8000f18:	230c      	movs	r3, #12
 8000f1a:	6033      	str	r3, [r6, #0]
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000ff8 <_malloc_r+0xfc>
 8000f26:	f000 f869 	bl	8000ffc <__malloc_lock>
 8000f2a:	f8d8 3000 	ldr.w	r3, [r8]
 8000f2e:	461c      	mov	r4, r3
 8000f30:	bb44      	cbnz	r4, 8000f84 <_malloc_r+0x88>
 8000f32:	4629      	mov	r1, r5
 8000f34:	4630      	mov	r0, r6
 8000f36:	f7ff ffbf 	bl	8000eb8 <sbrk_aligned>
 8000f3a:	1c43      	adds	r3, r0, #1
 8000f3c:	4604      	mov	r4, r0
 8000f3e:	d158      	bne.n	8000ff2 <_malloc_r+0xf6>
 8000f40:	f8d8 4000 	ldr.w	r4, [r8]
 8000f44:	4627      	mov	r7, r4
 8000f46:	2f00      	cmp	r7, #0
 8000f48:	d143      	bne.n	8000fd2 <_malloc_r+0xd6>
 8000f4a:	2c00      	cmp	r4, #0
 8000f4c:	d04b      	beq.n	8000fe6 <_malloc_r+0xea>
 8000f4e:	6823      	ldr	r3, [r4, #0]
 8000f50:	4639      	mov	r1, r7
 8000f52:	4630      	mov	r0, r6
 8000f54:	eb04 0903 	add.w	r9, r4, r3
 8000f58:	f000 f988 	bl	800126c <_sbrk_r>
 8000f5c:	4581      	cmp	r9, r0
 8000f5e:	d142      	bne.n	8000fe6 <_malloc_r+0xea>
 8000f60:	6821      	ldr	r1, [r4, #0]
 8000f62:	1a6d      	subs	r5, r5, r1
 8000f64:	4629      	mov	r1, r5
 8000f66:	4630      	mov	r0, r6
 8000f68:	f7ff ffa6 	bl	8000eb8 <sbrk_aligned>
 8000f6c:	3001      	adds	r0, #1
 8000f6e:	d03a      	beq.n	8000fe6 <_malloc_r+0xea>
 8000f70:	6823      	ldr	r3, [r4, #0]
 8000f72:	442b      	add	r3, r5
 8000f74:	6023      	str	r3, [r4, #0]
 8000f76:	f8d8 3000 	ldr.w	r3, [r8]
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	bb62      	cbnz	r2, 8000fd8 <_malloc_r+0xdc>
 8000f7e:	f8c8 7000 	str.w	r7, [r8]
 8000f82:	e00f      	b.n	8000fa4 <_malloc_r+0xa8>
 8000f84:	6822      	ldr	r2, [r4, #0]
 8000f86:	1b52      	subs	r2, r2, r5
 8000f88:	d420      	bmi.n	8000fcc <_malloc_r+0xd0>
 8000f8a:	2a0b      	cmp	r2, #11
 8000f8c:	d917      	bls.n	8000fbe <_malloc_r+0xc2>
 8000f8e:	1961      	adds	r1, r4, r5
 8000f90:	42a3      	cmp	r3, r4
 8000f92:	6025      	str	r5, [r4, #0]
 8000f94:	bf18      	it	ne
 8000f96:	6059      	strne	r1, [r3, #4]
 8000f98:	6863      	ldr	r3, [r4, #4]
 8000f9a:	bf08      	it	eq
 8000f9c:	f8c8 1000 	streq.w	r1, [r8]
 8000fa0:	5162      	str	r2, [r4, r5]
 8000fa2:	604b      	str	r3, [r1, #4]
 8000fa4:	4630      	mov	r0, r6
 8000fa6:	f000 f82f 	bl	8001008 <__malloc_unlock>
 8000faa:	f104 000b 	add.w	r0, r4, #11
 8000fae:	1d23      	adds	r3, r4, #4
 8000fb0:	f020 0007 	bic.w	r0, r0, #7
 8000fb4:	1ac2      	subs	r2, r0, r3
 8000fb6:	bf1c      	itt	ne
 8000fb8:	1a1b      	subne	r3, r3, r0
 8000fba:	50a3      	strne	r3, [r4, r2]
 8000fbc:	e7af      	b.n	8000f1e <_malloc_r+0x22>
 8000fbe:	6862      	ldr	r2, [r4, #4]
 8000fc0:	42a3      	cmp	r3, r4
 8000fc2:	bf0c      	ite	eq
 8000fc4:	f8c8 2000 	streq.w	r2, [r8]
 8000fc8:	605a      	strne	r2, [r3, #4]
 8000fca:	e7eb      	b.n	8000fa4 <_malloc_r+0xa8>
 8000fcc:	4623      	mov	r3, r4
 8000fce:	6864      	ldr	r4, [r4, #4]
 8000fd0:	e7ae      	b.n	8000f30 <_malloc_r+0x34>
 8000fd2:	463c      	mov	r4, r7
 8000fd4:	687f      	ldr	r7, [r7, #4]
 8000fd6:	e7b6      	b.n	8000f46 <_malloc_r+0x4a>
 8000fd8:	461a      	mov	r2, r3
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	42a3      	cmp	r3, r4
 8000fde:	d1fb      	bne.n	8000fd8 <_malloc_r+0xdc>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	6053      	str	r3, [r2, #4]
 8000fe4:	e7de      	b.n	8000fa4 <_malloc_r+0xa8>
 8000fe6:	230c      	movs	r3, #12
 8000fe8:	6033      	str	r3, [r6, #0]
 8000fea:	4630      	mov	r0, r6
 8000fec:	f000 f80c 	bl	8001008 <__malloc_unlock>
 8000ff0:	e794      	b.n	8000f1c <_malloc_r+0x20>
 8000ff2:	6005      	str	r5, [r0, #0]
 8000ff4:	e7d6      	b.n	8000fa4 <_malloc_r+0xa8>
 8000ff6:	bf00      	nop
 8000ff8:	2000021c 	.word	0x2000021c

08000ffc <__malloc_lock>:
 8000ffc:	4801      	ldr	r0, [pc, #4]	@ (8001004 <__malloc_lock+0x8>)
 8000ffe:	f7ff bf0e 	b.w	8000e1e <__retarget_lock_acquire_recursive>
 8001002:	bf00      	nop
 8001004:	20000214 	.word	0x20000214

08001008 <__malloc_unlock>:
 8001008:	4801      	ldr	r0, [pc, #4]	@ (8001010 <__malloc_unlock+0x8>)
 800100a:	f7ff bf09 	b.w	8000e20 <__retarget_lock_release_recursive>
 800100e:	bf00      	nop
 8001010:	20000214 	.word	0x20000214

08001014 <__sflush_r>:
 8001014:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101a:	0716      	lsls	r6, r2, #28
 800101c:	4605      	mov	r5, r0
 800101e:	460c      	mov	r4, r1
 8001020:	d454      	bmi.n	80010cc <__sflush_r+0xb8>
 8001022:	684b      	ldr	r3, [r1, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	dc02      	bgt.n	800102e <__sflush_r+0x1a>
 8001028:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800102a:	2b00      	cmp	r3, #0
 800102c:	dd48      	ble.n	80010c0 <__sflush_r+0xac>
 800102e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001030:	2e00      	cmp	r6, #0
 8001032:	d045      	beq.n	80010c0 <__sflush_r+0xac>
 8001034:	2300      	movs	r3, #0
 8001036:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800103a:	682f      	ldr	r7, [r5, #0]
 800103c:	6a21      	ldr	r1, [r4, #32]
 800103e:	602b      	str	r3, [r5, #0]
 8001040:	d030      	beq.n	80010a4 <__sflush_r+0x90>
 8001042:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001044:	89a3      	ldrh	r3, [r4, #12]
 8001046:	0759      	lsls	r1, r3, #29
 8001048:	d505      	bpl.n	8001056 <__sflush_r+0x42>
 800104a:	6863      	ldr	r3, [r4, #4]
 800104c:	1ad2      	subs	r2, r2, r3
 800104e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001050:	b10b      	cbz	r3, 8001056 <__sflush_r+0x42>
 8001052:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001054:	1ad2      	subs	r2, r2, r3
 8001056:	2300      	movs	r3, #0
 8001058:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800105a:	6a21      	ldr	r1, [r4, #32]
 800105c:	4628      	mov	r0, r5
 800105e:	47b0      	blx	r6
 8001060:	1c43      	adds	r3, r0, #1
 8001062:	89a3      	ldrh	r3, [r4, #12]
 8001064:	d106      	bne.n	8001074 <__sflush_r+0x60>
 8001066:	6829      	ldr	r1, [r5, #0]
 8001068:	291d      	cmp	r1, #29
 800106a:	d82b      	bhi.n	80010c4 <__sflush_r+0xb0>
 800106c:	4a28      	ldr	r2, [pc, #160]	@ (8001110 <__sflush_r+0xfc>)
 800106e:	410a      	asrs	r2, r1
 8001070:	07d6      	lsls	r6, r2, #31
 8001072:	d427      	bmi.n	80010c4 <__sflush_r+0xb0>
 8001074:	2200      	movs	r2, #0
 8001076:	6062      	str	r2, [r4, #4]
 8001078:	04d9      	lsls	r1, r3, #19
 800107a:	6922      	ldr	r2, [r4, #16]
 800107c:	6022      	str	r2, [r4, #0]
 800107e:	d504      	bpl.n	800108a <__sflush_r+0x76>
 8001080:	1c42      	adds	r2, r0, #1
 8001082:	d101      	bne.n	8001088 <__sflush_r+0x74>
 8001084:	682b      	ldr	r3, [r5, #0]
 8001086:	b903      	cbnz	r3, 800108a <__sflush_r+0x76>
 8001088:	6560      	str	r0, [r4, #84]	@ 0x54
 800108a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800108c:	602f      	str	r7, [r5, #0]
 800108e:	b1b9      	cbz	r1, 80010c0 <__sflush_r+0xac>
 8001090:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001094:	4299      	cmp	r1, r3
 8001096:	d002      	beq.n	800109e <__sflush_r+0x8a>
 8001098:	4628      	mov	r0, r5
 800109a:	f7ff fec3 	bl	8000e24 <_free_r>
 800109e:	2300      	movs	r3, #0
 80010a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80010a2:	e00d      	b.n	80010c0 <__sflush_r+0xac>
 80010a4:	2301      	movs	r3, #1
 80010a6:	4628      	mov	r0, r5
 80010a8:	47b0      	blx	r6
 80010aa:	4602      	mov	r2, r0
 80010ac:	1c50      	adds	r0, r2, #1
 80010ae:	d1c9      	bne.n	8001044 <__sflush_r+0x30>
 80010b0:	682b      	ldr	r3, [r5, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d0c6      	beq.n	8001044 <__sflush_r+0x30>
 80010b6:	2b1d      	cmp	r3, #29
 80010b8:	d001      	beq.n	80010be <__sflush_r+0xaa>
 80010ba:	2b16      	cmp	r3, #22
 80010bc:	d11d      	bne.n	80010fa <__sflush_r+0xe6>
 80010be:	602f      	str	r7, [r5, #0]
 80010c0:	2000      	movs	r0, #0
 80010c2:	e021      	b.n	8001108 <__sflush_r+0xf4>
 80010c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	e01a      	b.n	8001102 <__sflush_r+0xee>
 80010cc:	690f      	ldr	r7, [r1, #16]
 80010ce:	2f00      	cmp	r7, #0
 80010d0:	d0f6      	beq.n	80010c0 <__sflush_r+0xac>
 80010d2:	0793      	lsls	r3, r2, #30
 80010d4:	680e      	ldr	r6, [r1, #0]
 80010d6:	bf08      	it	eq
 80010d8:	694b      	ldreq	r3, [r1, #20]
 80010da:	600f      	str	r7, [r1, #0]
 80010dc:	bf18      	it	ne
 80010de:	2300      	movne	r3, #0
 80010e0:	1bf6      	subs	r6, r6, r7
 80010e2:	608b      	str	r3, [r1, #8]
 80010e4:	2e00      	cmp	r6, #0
 80010e6:	ddeb      	ble.n	80010c0 <__sflush_r+0xac>
 80010e8:	6a21      	ldr	r1, [r4, #32]
 80010ea:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80010ee:	4633      	mov	r3, r6
 80010f0:	463a      	mov	r2, r7
 80010f2:	4628      	mov	r0, r5
 80010f4:	47e0      	blx	ip
 80010f6:	2800      	cmp	r0, #0
 80010f8:	dc07      	bgt.n	800110a <__sflush_r+0xf6>
 80010fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001102:	81a3      	strh	r3, [r4, #12]
 8001104:	f04f 30ff 	mov.w	r0, #4294967295
 8001108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800110a:	4407      	add	r7, r0
 800110c:	1a36      	subs	r6, r6, r0
 800110e:	e7e9      	b.n	80010e4 <__sflush_r+0xd0>
 8001110:	dfbffffe 	.word	0xdfbffffe

08001114 <_fflush_r>:
 8001114:	b538      	push	{r3, r4, r5, lr}
 8001116:	690b      	ldr	r3, [r1, #16]
 8001118:	4605      	mov	r5, r0
 800111a:	460c      	mov	r4, r1
 800111c:	b913      	cbnz	r3, 8001124 <_fflush_r+0x10>
 800111e:	2500      	movs	r5, #0
 8001120:	4628      	mov	r0, r5
 8001122:	bd38      	pop	{r3, r4, r5, pc}
 8001124:	b118      	cbz	r0, 800112e <_fflush_r+0x1a>
 8001126:	6a03      	ldr	r3, [r0, #32]
 8001128:	b90b      	cbnz	r3, 800112e <_fflush_r+0x1a>
 800112a:	f7ff fc93 	bl	8000a54 <__sinit>
 800112e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d0f3      	beq.n	800111e <_fflush_r+0xa>
 8001136:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001138:	07d0      	lsls	r0, r2, #31
 800113a:	d404      	bmi.n	8001146 <_fflush_r+0x32>
 800113c:	0599      	lsls	r1, r3, #22
 800113e:	d402      	bmi.n	8001146 <_fflush_r+0x32>
 8001140:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001142:	f7ff fe6c 	bl	8000e1e <__retarget_lock_acquire_recursive>
 8001146:	4628      	mov	r0, r5
 8001148:	4621      	mov	r1, r4
 800114a:	f7ff ff63 	bl	8001014 <__sflush_r>
 800114e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001150:	07da      	lsls	r2, r3, #31
 8001152:	4605      	mov	r5, r0
 8001154:	d4e4      	bmi.n	8001120 <_fflush_r+0xc>
 8001156:	89a3      	ldrh	r3, [r4, #12]
 8001158:	059b      	lsls	r3, r3, #22
 800115a:	d4e1      	bmi.n	8001120 <_fflush_r+0xc>
 800115c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800115e:	f7ff fe5f 	bl	8000e20 <__retarget_lock_release_recursive>
 8001162:	e7dd      	b.n	8001120 <_fflush_r+0xc>

08001164 <__swhatbuf_r>:
 8001164:	b570      	push	{r4, r5, r6, lr}
 8001166:	460c      	mov	r4, r1
 8001168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800116c:	2900      	cmp	r1, #0
 800116e:	b096      	sub	sp, #88	@ 0x58
 8001170:	4615      	mov	r5, r2
 8001172:	461e      	mov	r6, r3
 8001174:	da0d      	bge.n	8001192 <__swhatbuf_r+0x2e>
 8001176:	89a3      	ldrh	r3, [r4, #12]
 8001178:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800117c:	f04f 0100 	mov.w	r1, #0
 8001180:	bf14      	ite	ne
 8001182:	2340      	movne	r3, #64	@ 0x40
 8001184:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001188:	2000      	movs	r0, #0
 800118a:	6031      	str	r1, [r6, #0]
 800118c:	602b      	str	r3, [r5, #0]
 800118e:	b016      	add	sp, #88	@ 0x58
 8001190:	bd70      	pop	{r4, r5, r6, pc}
 8001192:	466a      	mov	r2, sp
 8001194:	f000 f848 	bl	8001228 <_fstat_r>
 8001198:	2800      	cmp	r0, #0
 800119a:	dbec      	blt.n	8001176 <__swhatbuf_r+0x12>
 800119c:	9901      	ldr	r1, [sp, #4]
 800119e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80011a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80011a6:	4259      	negs	r1, r3
 80011a8:	4159      	adcs	r1, r3
 80011aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ae:	e7eb      	b.n	8001188 <__swhatbuf_r+0x24>

080011b0 <__smakebuf_r>:
 80011b0:	898b      	ldrh	r3, [r1, #12]
 80011b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80011b4:	079d      	lsls	r5, r3, #30
 80011b6:	4606      	mov	r6, r0
 80011b8:	460c      	mov	r4, r1
 80011ba:	d507      	bpl.n	80011cc <__smakebuf_r+0x1c>
 80011bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80011c0:	6023      	str	r3, [r4, #0]
 80011c2:	6123      	str	r3, [r4, #16]
 80011c4:	2301      	movs	r3, #1
 80011c6:	6163      	str	r3, [r4, #20]
 80011c8:	b003      	add	sp, #12
 80011ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011cc:	ab01      	add	r3, sp, #4
 80011ce:	466a      	mov	r2, sp
 80011d0:	f7ff ffc8 	bl	8001164 <__swhatbuf_r>
 80011d4:	9f00      	ldr	r7, [sp, #0]
 80011d6:	4605      	mov	r5, r0
 80011d8:	4639      	mov	r1, r7
 80011da:	4630      	mov	r0, r6
 80011dc:	f7ff fe8e 	bl	8000efc <_malloc_r>
 80011e0:	b948      	cbnz	r0, 80011f6 <__smakebuf_r+0x46>
 80011e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011e6:	059a      	lsls	r2, r3, #22
 80011e8:	d4ee      	bmi.n	80011c8 <__smakebuf_r+0x18>
 80011ea:	f023 0303 	bic.w	r3, r3, #3
 80011ee:	f043 0302 	orr.w	r3, r3, #2
 80011f2:	81a3      	strh	r3, [r4, #12]
 80011f4:	e7e2      	b.n	80011bc <__smakebuf_r+0xc>
 80011f6:	89a3      	ldrh	r3, [r4, #12]
 80011f8:	6020      	str	r0, [r4, #0]
 80011fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011fe:	81a3      	strh	r3, [r4, #12]
 8001200:	9b01      	ldr	r3, [sp, #4]
 8001202:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001206:	b15b      	cbz	r3, 8001220 <__smakebuf_r+0x70>
 8001208:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800120c:	4630      	mov	r0, r6
 800120e:	f000 f81d 	bl	800124c <_isatty_r>
 8001212:	b128      	cbz	r0, 8001220 <__smakebuf_r+0x70>
 8001214:	89a3      	ldrh	r3, [r4, #12]
 8001216:	f023 0303 	bic.w	r3, r3, #3
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	81a3      	strh	r3, [r4, #12]
 8001220:	89a3      	ldrh	r3, [r4, #12]
 8001222:	431d      	orrs	r5, r3
 8001224:	81a5      	strh	r5, [r4, #12]
 8001226:	e7cf      	b.n	80011c8 <__smakebuf_r+0x18>

08001228 <_fstat_r>:
 8001228:	b538      	push	{r3, r4, r5, lr}
 800122a:	4d07      	ldr	r5, [pc, #28]	@ (8001248 <_fstat_r+0x20>)
 800122c:	2300      	movs	r3, #0
 800122e:	4604      	mov	r4, r0
 8001230:	4608      	mov	r0, r1
 8001232:	4611      	mov	r1, r2
 8001234:	602b      	str	r3, [r5, #0]
 8001236:	f7ff fafb 	bl	8000830 <_fstat>
 800123a:	1c43      	adds	r3, r0, #1
 800123c:	d102      	bne.n	8001244 <_fstat_r+0x1c>
 800123e:	682b      	ldr	r3, [r5, #0]
 8001240:	b103      	cbz	r3, 8001244 <_fstat_r+0x1c>
 8001242:	6023      	str	r3, [r4, #0]
 8001244:	bd38      	pop	{r3, r4, r5, pc}
 8001246:	bf00      	nop
 8001248:	20000210 	.word	0x20000210

0800124c <_isatty_r>:
 800124c:	b538      	push	{r3, r4, r5, lr}
 800124e:	4d06      	ldr	r5, [pc, #24]	@ (8001268 <_isatty_r+0x1c>)
 8001250:	2300      	movs	r3, #0
 8001252:	4604      	mov	r4, r0
 8001254:	4608      	mov	r0, r1
 8001256:	602b      	str	r3, [r5, #0]
 8001258:	f7ff faf9 	bl	800084e <_isatty>
 800125c:	1c43      	adds	r3, r0, #1
 800125e:	d102      	bne.n	8001266 <_isatty_r+0x1a>
 8001260:	682b      	ldr	r3, [r5, #0]
 8001262:	b103      	cbz	r3, 8001266 <_isatty_r+0x1a>
 8001264:	6023      	str	r3, [r4, #0]
 8001266:	bd38      	pop	{r3, r4, r5, pc}
 8001268:	20000210 	.word	0x20000210

0800126c <_sbrk_r>:
 800126c:	b538      	push	{r3, r4, r5, lr}
 800126e:	4d06      	ldr	r5, [pc, #24]	@ (8001288 <_sbrk_r+0x1c>)
 8001270:	2300      	movs	r3, #0
 8001272:	4604      	mov	r4, r0
 8001274:	4608      	mov	r0, r1
 8001276:	602b      	str	r3, [r5, #0]
 8001278:	f7ff fb00 	bl	800087c <_sbrk>
 800127c:	1c43      	adds	r3, r0, #1
 800127e:	d102      	bne.n	8001286 <_sbrk_r+0x1a>
 8001280:	682b      	ldr	r3, [r5, #0]
 8001282:	b103      	cbz	r3, 8001286 <_sbrk_r+0x1a>
 8001284:	6023      	str	r3, [r4, #0]
 8001286:	bd38      	pop	{r3, r4, r5, pc}
 8001288:	20000210 	.word	0x20000210

0800128c <_init>:
 800128c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800128e:	bf00      	nop
 8001290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001292:	bc08      	pop	{r3}
 8001294:	469e      	mov	lr, r3
 8001296:	4770      	bx	lr

08001298 <_fini>:
 8001298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800129a:	bf00      	nop
 800129c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800129e:	bc08      	pop	{r3}
 80012a0:	469e      	mov	lr, r3
 80012a2:	4770      	bx	lr
